import { css, LitElement, html } from 'lit';
import { classMap } from 'lit/directives/class-map.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import checkLg from '@alaskaairux/icons/dist/icons/interface/check-lg.mjs';
import AuroLibraryRuntimeUtils from '@aurodesignsystem/auro-library/scripts/utils/runtimeUtils.mjs';
import AuroFormValidation from '@aurodesignsystem/auro-formvalidation/src/validation.js';

var styleCss$1 = css`*,*:before,*:after{box-sizing:border-box}@media(prefers-reduced-motion: reduce){*,*:before,*:after{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important}}*:focus-visible{outline:0}*:focus-visible{outline:0}:focus:not(:focus-visible){outline:3px solid transparent}.util_displayInline{display:inline}.util_displayInlineBlock{display:inline-block}.util_displayBlock{display:block}.util_displayFlex{display:flex}.util_displayHidden{display:none}.util_displayHiddenVisually{position:absolute;overflow:hidden;clip:rect(1px, 1px, 1px, 1px);width:1px;height:1px;padding:0;border:0}:host{display:block;--cbxLocation: var(--ds-size-50, $ds-size-50)}fieldset{all:unset}@media screen and (min-width: 576px){.displayFlex slot{display:flex}}.cbxContainer{position:relative;padding-left:var(--ds-size-100, 0.5rem);padding-right:var(--ds-size-100, 0.5rem);line-height:var(--ds-size-400, 2rem)}.cbx--input:disabled+label:hover{cursor:auto}.label{margin-left:var(--ds-size-300, 1.5rem);display:block}.label:hover{cursor:pointer}.label--cbx:after{-webkit-tap-highlight-color:transparent;position:absolute;content:"";top:var(--ds-size-50, 0.25rem);left:var(--cbxLocation);width:calc(var(--ds-size-200, 1rem) + var(--ds-size-50, 0.25rem));height:calc(var(--ds-size-200, 1rem) + var(--ds-size-50, 0.25rem));border-width:1px;border-style:solid;border-radius:var(--ds-border-radius, 0.375rem);outline-style:solid;outline-width:1px;z-index:0}.svg--cbx{position:absolute;top:var(--ds-size-25, 0.125rem);left:var(--ds-size-25, 0.125rem);padding-top:3px;padding-bottom:3px;z-index:1}`;

var colorCss$1 = css`:host .label{color:var(--ds-auro-checkbox-label-color)}:host .label--cbx:after{background-color:var(--ds-auro-checkbox-container-color);border-color:var(--ds-auro-checkbox-border-color);outline-color:var(--ds-auro-checkbox-outline-color)}:host .label--cbx:hover{--ds-auro-checkbox-container-color: var(--ds-color-container-ui-secondary-hover-default, rgba(0, 0, 0, 0.03))}:host .svg--cbx{color:var(--ds-auro-checkbox-checkmark-color)}:host(:focus-within){--ds-auro-checkbox-border-color: var(--ds-color-border-ui-focus-default, #2c67b5);--ds-auro-checkbox-outline-color: var(--ds-color-border-ui-focus-default, #2c67b5)}:host([checked]){--ds-auro-checkbox-border-color: var(--ds-color-border-ui-default-default, #2c67b5);--ds-auro-checkbox-container-color: var(--ds-color-container-ui-primary-default-default, #2c67b5)}:host([checked]) .label--cbx:hover{--ds-auro-checkbox-border-color: var(--ds-color-border-ui-hover-default, #193d73);--ds-auro-checkbox-container-color: var(--ds-color-container-ui-primary-hover-default, #193d73)}:host([checked]:focus-within){--ds-auro-checkbox-border-color: var(--ds-color-border-subtle-default, #f0f7fd)}:host([checked]:focus-within) .label--cbx:hover{--ds-auro-checkbox-border-color: var(--ds-color-border-subtle-default, #f0f7fd);--ds-auro-checkbox-container-color: var(--ds-color-container-ui-primary-hover-default, #193d73)}:host([disabled]){--ds-auro-checkbox-border-color: var(--ds-color-border-ui-disabled-default, #adadad);--ds-auro-checkbox-container-color: var(--ds-color-container-primary-default, #ffffff);--ds-auro-checkbox-label-color: var(--ds-color-text-ui-disabled-default, #adadad)}:host([disabled]) .label--cbx:hover{--ds-auro-checkbox-border-color: var(--ds-color-border-ui-disabled-default, #adadad);--ds-auro-checkbox-container-color: var(--ds-color-container-primary-default, #ffffff)}:host([disabled][checked]){--ds-auro-checkbox-border-color: var(--ds-color-border-ui-disabled-default, #adadad);--ds-auro-checkbox-checkmark-color: var(--ds-color-icon-ui-primary-disabled-default, #adadad);--ds-auro-checkbox-container-color: var(--ds-color-container-primary-default, #ffffff)}:host([disabled][checked]) .label--cbx:hover{--ds-auro-checkbox-border-color: var(--ds-color-border-ui-disabled-default, #adadad);--ds-auro-checkbox-container-color: var(--ds-color-container-primary-default, #ffffff)}:host([error]){--ds-auro-checkbox-border-color: var(--ds-color-utility-error-default, #cc1816);--ds-auro-checkbox-container-color: var(--ds-color-container-primary-default, #ffffff)}:host([error]:not([checked]):focus-within){--ds-auro-checkbox-border-color: var(--ds-color-border-ui-active-default, #225296);--ds-auro-checkbox-outline-color: var(--ds-color-border-ui-active-default, #225296)}:host([error][checked]){--ds-auro-checkbox-border-color: var(--ds-color-border-error-default, #cc1816);--ds-auro-checkbox-container-color: var(--ds-color-utility-error-default, #cc1816)}:host([error][checked]) .label--cbx:hover{--ds-auro-checkbox-border-color: var(--ds-color-container-error-inverse, #74110e);--ds-auro-checkbox-container-color: var(--ds-color-container-error-inverse, #df0b37)}:host([error][checked]:focus-within){--ds-auro-checkbox-border-color: var(--ds-color-border-subtle-default, #f0f7fd)}:host([error][checked]:focus-within) .label--cbx:hover{--ds-auro-checkbox-border-color: var(--ds-color-border-subtle-default, #f0f7fd);--ds-auro-checkbox-container-color: var(--ds-color-utility-error-default, #cc1816)}`;

var tokensCss = css`:host{--ds-auro-checkbox-border-color: var(--ds-color-border-primary-default, #585e67);--ds-auro-checkbox-checkmark-color: var(--ds-color-icon-emphasis-inverse, #ffffff);--ds-auro-checkbox-container-color: var(--ds-color-container-primary-default, #ffffff);--ds-auro-checkbox-label-color: var(--ds-color-text-primary-default, #2a2a2a);--ds-auro-checkbox-outline-color: transparent;--ds-auro-checkbox-group-helptext-color: var(--ds-color-text-secondary-default, #525252);--ds-auro-checkbox-group-text-color: var(--ds-color-text-primary-default, #2a2a2a)}`;

// Copyright (c) 2020 Alaska Airlines. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.


/**
 * Custom element for the purpose of allowing users to select one or more options of a limited number of choices.
 *
 * @attr {Boolean} checked - If set to true, the checkbox will be filled with a checkmark.
 * @attr {Boolean} disabled - If set to true, the checkbox will not be clickable.
 * @attr {Boolean} error - If set to true, sets an error state on the checkbox.
 * @attr {String} id - Sets the individual `id` per element.
 * @attr {String} name - Accepts any string, `DOMString` representing the value of the input.
 * @attr {String} value - Sets the element's input value.
 * @csspart checkbox - apply css to a specific checkbox.
 * @csspart checkbox-input - apply css to a specific checkbox's input.
 * @csspart checkbox-label - apply css to a specific checkbox's label.
 */

// build the component class
class AuroCheckbox extends LitElement {
  constructor() {
    super();
    this.checked = false;
    this.disabled = false;
    this.error = false;

    /**
     * @private
     */
    this.runtimeUtils = new AuroLibraryRuntimeUtils();
  }

  static get styles() {
    return [
      styleCss$1,
      colorCss$1,
      tokensCss
    ];
  }

  // function to define props used within the scope of this component
  static get properties() {
    return {
      checked: {
        type: Boolean,
        reflect: true
      },
      disabled: {
        type: Boolean,
        reflect: true
      },
      error: {
        type: Boolean,
        reflect: true
      },
      id:       { type: String },
      name:     { type: String },
      value:    { type: String }
    };
  }

  /**
   * This will register this element with the browser.
   * @param {string} [name="auro-checkbox"] - The name of element that you want to register to.
   *
   * @example
   * AuroCheckbox.register("custom-checkbox") // this will register this element to <custom-checkbox/>
   *
   */
  static register(name = "auro-checkbox") {
    AuroLibraryRuntimeUtils.prototype.registerComponent(name, AuroCheckbox);
  }

  // This custom event is only for the purpose of supporting IE
  // .addEventListener('change', function() { })
  handleChange(event) {
    this.checked = event.target.checked;
    const customEvent = new CustomEvent(event.type, event);

    this.dispatchEvent(customEvent);
  }

  handleInput(event) {
    this.checked = event.target.checked;

    this.dispatchEvent(new CustomEvent('auroCheckbox-input', {
      bubbles: true,
      cancelable: false,
      composed: true,
    }));
  }

  /**
   * Function to support @focusin event.
   * @private
   * @returns {void}
   */
  handleFocusin() {
    this.dispatchEvent(new CustomEvent('auroCheckbox-focusin', {
      bubbles: true,
      cancelable: false,
      composed: true,
    }));
  }

  /**
   * Function to generate checkmark svg.
   * @private
   * @returns {void}
   */
  generateIconHtml() {
    this.dom = new DOMParser().parseFromString(checkLg.svg, 'text/html');
    this.svg = this.dom.body.firstChild;

    this.svg.classList.add('svg--cbx');

    return this.svg;
  }

  firstUpdated() {
    // Add the tag name as an attribute if it is different than the component name
    this.runtimeUtils.handleComponentTagRename(this, 'auro-checkbox');

    this.addEventListener('click', () => {
      this.handleFocusin();
    });

    this.addEventListener('focusin', () => {
      this.handleFocusin();
    });

    this.addEventListener('focusout', () => {
      this.dispatchEvent(new CustomEvent('auroCheckbox-focusout', {
        bubbles: true,
        cancelable: false,
        composed: true,
      }));
    });
  }

  // function that renders the HTML and CSS into  the scope of the component
  render() {
    const labelClasses = {
      'label': true,
      'label--cbx': true,
      'errorBorder': this.error
    };

    return html`
      <div class="cbxContainer" part="checkbox">
        <input
          class="util_displayHiddenVisually cbx--input"
          part="checkbox-input"
          @change=${this.handleChange}
          @input="${this.handleInput}"
          ?disabled="${this.disabled}"
          .checked="${this.checked}"
          id="${ifDefined(this.id)}"
          name="${ifDefined(this.name)}"
          type="checkbox"
          .value="${this.value}"
        />

        <label for="${ifDefined(this.id)}" class="${classMap(labelClasses)}" part="checkbox-label">
          ${this.checked ? this.generateIconHtml() : undefined}
          <slot></slot>
        </label>
      </div>
    `;
  }
}

var styleCss = css`:host{display:block;padding-bottom:var(--ds-size-150, 0.75rem)}.displayFlex legend+slot{display:flex;white-space:nowrap}fieldset{all:unset}legend{margin-bottom:var(--ds-size-150, 0.75rem)}`;

var colorCss = css`:host{color:var(--ds-auro-checkbox-group-text-color)}:host([disabled]){--ds-auro-checkbox-group-text-color: var(--ds-color-text-ui-disabled-default, #adadad)}.checkboxGroupElement-helpText{color:var(--ds-auro-checkbox-group-helptext-color)}:host([validity]:not([validity=valid])){--ds-auro-checkbox-group-helptext-color: var(--ds-color-text-error-default, #cc1816)}`;

// Copyright (c) 2020 Alaska Airlines. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.


/**
 * The auro-checkbox-group element is a wrapper for auro-checkbox element.
 *
 * @attr {String} validity - Specifies the `validityState` this element is in.
 * @attr {String} setCustomValidity - Sets a custom help text message to display for all validityStates.
 * @attr {String} setCustomValidityCustomError - Custom help text message to display when validity = `customError`.
 * @attr {String} setCustomValidityValueMissing - Custom help text message to display when validity = `valueMissing`.
 * @attr {String} error - When defined, sets persistent validity to `customError` and sets `setCustomValidity` = attribute value.
 * @attr {Boolean} noValidate - If set, disables auto-validation on blur.
 * @attr {Boolean} required - Populates the `required` attribute on the element. Used for client-side validation.
 * @attr {Boolean} horizontal - If set, checkboxes will be aligned horizontally.
 * @slot {HTMLSlotElement} legend - Allows for the legend to be overridden.
 * @slot {HTMLSlotElement} optionalLabel - Allows for the optional label to be overridden.
 * @slot {HTMLSlotElement} helpText - Allows for the helper text to be overridden.
 * @event auroFormElement-validated - Notifies that the `validity` and `errorMessage` values have changed.
 */

class AuroCheckboxGroup extends LitElement {
  constructor() {
    super();

    this.validity = undefined;
    this.value = undefined;
    this.disabled = undefined;
    this.required = false;
    this.horizontal = false;

    /**
     * @private
     */
    this.index = 0;

    /**
     * @private
     */
    this.maxNumber = 3;

    /**
     * @private
     */
    this.validation = new AuroFormValidation();

    /**
     * @private
     */
    this.runtimeUtils = new AuroLibraryRuntimeUtils();
  }

  static get styles() {
    return [
      styleCss,
      colorCss,
      tokensCss
    ];
  }

  static get properties() {
    return {
      disabled: {
        type: Boolean,
        reflect: true
      },
      horizontal: {
        type: Boolean,
        reflect: true
      },
      value: {
        type: Array
      },
      noValidate: {
        type: Boolean,
        reflect: true
      },
      required: {
        type: Boolean,
        reflect: true
      },
      error: {
        type: String,
        reflect: true
      },
      setCustomValidity: {
        type: String
      },
      setCustomValidityCustomError: {
        type: String
      },
      setCustomValidityValueMissing: {
        type: String
      },
      validity: {
        type: String,
        reflect: true
      }
    };
  }

  /**
   * This will register this element with the browser.
   * @param {string} [name="auro-checkbox-group"] - The name of element that you want to register to.
   *
   * @example
   * AuroCheckboxGroup.register("custom-checkbox-group") // this will register this element to <custom-checkbox-group/>
   *
   */
  static register(name = "auro-checkbox-group") {
    AuroLibraryRuntimeUtils.prototype.registerComponent(name, AuroCheckboxGroup);
  }

  connectedCallback() {
    super.connectedCallback();
    this.handleItems();
  }

  /**
   * Helper method to handle checkbox value changing.
   * @private
   * @param {String} value - The value of the checkbox.
   * @param {Boolean} selected - The checked state of the checkbox.
   * @returns {void}
   */
  handleValueUpdate(value, selected) {
    if (selected) {
      // add if it isn't already in the value list
      if (!this.value.includes(value)) {
        this.value.push(value);
      }
    } else if (this.value.indexOf(value) > -1) { // eslint-disable-line no-magic-numbers
      // remove if it is in the value list
      const index = this.value.indexOf(value);

      this.value.splice(index, 1);
    }

    this.dispatchEvent(new CustomEvent('input', {
      bubbles: true,
      cancelable: false,
      composed: true,
    }));

    this.validation.validate(this, true);
  }

  firstUpdated() {
    // Add the tag name as an attribute if it is different than the component name
    this.runtimeUtils.handleComponentTagRename(this, 'auro-checkbox-group');

    // must declare this function as a variable to correctly pass the reference to the removeEventListener
    const checkFocusWithin = function(evt) {
      if (document.auroCheckboxGroupActive && !document.auroCheckboxGroupActive.contains(evt.target)) {
        // if focus has left the group, cleanup and validate
        document.auroCheckboxGroupActive.focusWithin = false;
        window.removeEventListener('focusin', checkFocusWithin);
        document.removeEventListener('click', checkFocusWithin);
        // execute the validation
        document.auroCheckboxGroupActive.validation.validate(document.auroCheckboxGroupActive);
      }
    };

    this.addEventListener('auroCheckbox-focusin', () => {
      if (!this.value) {
        this.value = [];
      }

      // handle click outside the group
      if (!this.focusWithin) {
        document.addEventListener('click', checkFocusWithin);
      }

      this.focusWithin = true;
    });

    this.addEventListener('auroCheckbox-focusout', () => {
      document.auroCheckboxGroupActive = this;

      // Only add the focusWithin check event listener once as you move focus through the options
      if (this.focusWithin) {
        window.addEventListener('focusin', checkFocusWithin);
      } else {
        this.focusWithin = true;
      }
    });

    this.addEventListener('auroCheckbox-input', (evt) => {
      this.handleValueUpdate(evt.target.value, evt.target.checked);
    });
  }

  /**
   * Helper method that handles the state of preselected checkboxes.
   * @private
   * @returns {void}
   */
  handlePreselectedItems() {
    let preSelectedValues = false;

    this.items.forEach((item) => {
      if (item.hasAttribute('checked') && this.value === undefined) {
        preSelectedValues = true;
      }
    });

    if (preSelectedValues) {
      if (!this.value) {
        this.value = [];
      }

      this.items.forEach((item) => {
        this.handleValueUpdate(item.getAttribute('value'), Boolean(item.hasAttribute('checked')));
      });
    }
  }

  /**
   * Helper method that handles the state of checkboxes.
   * @private
   * @returns {void}
   */
  handleItems() {
    const groupTagName = this.tagName.toLowerCase();
    const checkboxTagName = groupTagName.substring(0, groupTagName.indexOf('-group'));

    this.items = Array.from(this.querySelectorAll(checkboxTagName));

    this.handlePreselectedItems();

    this.validation.validate(this);
  }

  /**
   * LitElement lifecycle method. Called after the DOM has been updated.
   * @param {Map<string, any>} changedProperties - Keys are the names of changed properties, values are the corresponding previous values.
   * @returns {void}
   */
  updated(changedProperties) {
    if (changedProperties.has('disabled')) {
      this.items.forEach((el) => {
        if (this.disabled) {
          el.setAttribute('disabled', true);
        } else {
          el.removeAttribute('disabled');
        }
      });
    }

    if (changedProperties.has('validity')) {
      this.items.forEach((el) => {
        if (this.validity && this.validity !== 'valid') {
          el.setAttribute('error', true);
        } else {
          el.removeAttribute('error');
        }
      });
    }

    if (changedProperties.has('required')) {
      if (this.required) {
        this.setAttribute('aria-required', true);
      } else {
        this.removeAttribute('aria-required');
      }
    }

    if (changedProperties.has('error')) {
      if (this.error) {
        this.setAttribute('aria-invalid', true);
      } else {
        this.removeAttribute('aria-invalid');
      }

      this.validation.validate(this, true);
    }
  }

  render() {
    const groupClasses = {
      'displayFlex': this.horizontal && this.items.length <= this.maxNumber
    };

    return html`
      <fieldset class="${classMap(groupClasses)}">
        ${this.required
          ? html`<legend><slot name="legend"></slot></legend>`
          : html`<legend><slot name="legend"></slot> (optional)</legend>`
        }
        <slot @slotchange=${this.handleItems}></slot>
      </fieldset>

      ${!this.validity || this.validity === undefined || this.validity === 'valid'
        ? html`
          <p class="checkboxGroupElement-helpText" part="helpText">
            <slot name="helpText"></slot>
          </p>`
        : html`
          <p class="checkboxGroupElement-helpText" role="alert" aria-live="assertive" part="helpText">
            ${this.setCustomValidity}
          </p>`
      }
    `;
  }
}

AuroCheckbox.register(); // registering to `auro-checkbox`
AuroCheckboxGroup.register(); // registering to `auro-checkbox-group`

AuroCheckbox.register('custom-checkbox');
AuroCheckboxGroup.register('custom-checkbox-group');
